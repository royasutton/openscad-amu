/***************************************************************************//**
  \page openscad_dif_ht Command Line Help (openscad-dif)
  \include openscad-dif.help
*******************************************************************************/

/***************************************************************************//**
  \defgroup openscad_dif_src Source Code (openscad-dif)
  \brief
    The Doxygen input filter for \em OpenSCAD scripts.
*******************************************************************************/

/***************************************************************************//**
  \page openscad_dif_doc Program Usage (openscad-dif)
  \tableofcontents


  \section openscad_dif_sm Documenting OpenSCAD scripts

  This filter may be used to markup OpenSCAD scripts for use with
  Doygen. See [Documenting the code][docblocks] in the Doxygen manual
  for information.

  [docblocks]: http://www.doxygen.nl/manual/docblocks.html


  \subsection openscad_dif_sm_cs Comment Sections

  Comment patters are identified according to the rules in the
  following table. See the flex documentation on [patterns] for more
  information.

   pattern    | description
  :----------:|:--------------------------------------
   "//"       | ignored comment lines.
   "//"[/!]?  | comment line.
   "/*"[*!]?  | begin a comment block.
   "*"+"/"    | end comment block.
   "/""+"+    | begin a nested comment block.
   "+"+"/"    | end nested comment block.

  The filter supports nested comments which are useful for documenting
  the bahavior of include files and macros. A single level of nesting
  is permitted and must exists within a normal comment blocks. The
  content of nested comment blocks is discarded by the filter.

  [patterns]: https://westes.github.io/flex/manual/Patterns.html


  \subsection openscad_dif_sm_v Variabes

  The result of a function will be copied to the output of the filter
  operation unless a results variable name follows the function name.
  When a variable name is provided, the command result is stored in the
  specified variable and is not to copied to output.

  These variables can be referenced in the context of other function
  \em arguments. A variable is referenced using the form:
  <tt>${VAR}</tt>. Variable expansion is recursive and expansion can be
  postponed using expansion escaping of the form: <tt>\\${VAR}</tt>.

  \subsubsection openscad_dif_sm_av Automatic Variabes

  The following tables list the predefined variables.

  <b>Input File:</b>

   name               | description
  :-------------------|:----------------------------------
   ABS_FILE_NAME      | absolute input file name
   ABS_PATH_NAME      | absolute input path name
   FILE_NAME          | input file name
   PATH_NAME          | input file path name
   BASE_NAME          | input file base name
   STEM_NAME          | input file stem name
   EXT_NAME           | input file extension name

  <b>Include Files:</b>

   name               | description
  :-------------------|:----------------------------------
   FILE_CURRENT       | current input file name
   FILE_LIST          | list of all included input files

  <b>Function Configuration:</b>

   name               | description
  :-------------------|:----------------------------------
   EFS                | amu_eval feild separator

  <b>Seam Configuration:</b>

   name               | description
  :-------------------|:----------------------------------
   OUTPUT_PREFIX      | output prefix
   OPENSCAD_PATH      | openscad path
   OPENSCAD_EXT       | openscad extension


  \subsection openscad_dif_sm_a Arguments

  There are four categories that are used  by functions as summarized
  in the following table:

   type       | example           | scope
  :-----------|:-----------------:|:------:
   positional | value             | local
   named      | name=value        | local
   flag       | ++flag / \-\-flag | local
   incr/decr  | var++ / var\-\-   | global

  Except where noted, \p positional, \p named, and \p flag assignments
  types have \em local scope to the function where they are defined.
  The \p incr/decr assigned values have \em global scope across all
  functions for the current file. A named argument takes the form
  <tt>name=value</tt>, where \p name is a variable identifier and \p
  value is the content to assign. A single value must be identified by
  matching single or double quotes when it contains one or more spaces.

  \copydetails ODIF::ODIF_Scanner::fx_incr_arg()


  \subsection openscad_dif_sm_adc Doxygen Commands Summary

  The filter provides additional command functions that take the form:

  \code{.C}
  \amu_<function> <variable> ( <arguments> )
  \endcode

  The \em variable must be the first word that follows the function
  name, but does not have to be on the same line if present. The \em
  arguments, including the opening and closing parenthesis can also be
  split across any number of lines. The \em arguments may be blank,
  however, the parenthesis are required.

  In addition to the normal Doxygen [special commands], here is a list
  of additional filter-provided commands that can be used for document
  markup. The documentation for these commands may be found in section
  the \ref openscad_dif_sm_afc "additional commands".

  | internal commands               | description
  |:--------------------------------|:------------------------------------
  | \ref dif_afc_amu_include        | Include a file into input
  | \ref dif_afc_amu_define         | Define text macro
  | \ref dif_afc_amu_if             | Conditional text output
  | \ref dif_afc_amu_foreach        | Enumerated textual substitution
  | \ref dif_afc_amu_eval           | Evaluate arguments
  | \ref dif_afc_amu_shell          | Execute shell command
  | \ref dif_afc_amu_make           | Make script interface
  | \ref dif_afc_amu_scope          | Query scope data
  | \ref dif_afc_amu_source         | Query source filename
  | \ref dif_afc_amu_copy           | Copy references
  | \ref dif_afc_amu_find           | Search for output files
  | \ref dif_afc_amu_pathid         | Generate source path identifier
  | \ref dif_afc_amu_filename       | Operations for filename lists
  | \ref dif_afc_amu_file           | Perform operations on text files
  | \ref dif_afc_amu_combine        | Combine words
  | \ref dif_afc_amu_replace        | Text search and replace operation
  | \ref dif_afc_amu_word           | Count or select words from a list
  | \ref dif_afc_amu_seq            | Generate a sequence of numbers
  | \ref dif_afc_amu_table          | Generate a text table
  | \ref dif_afc_amu_image_table    | Generate an image table
  | \ref dif_afc_amu_viewer         | Graphics file viewer

  External commands also exists and can be found in the directory:
  <tt><install-prefix>/functions/</tt>.

  Here is a list:

  | external commands                 | description
  |:----------------------------------|:--------------------------------
  | \\amu_date                        | current date and/or time
  | \\amu_list                        | format arguments into a list

  [special commands]: http://www.doxygen.nl/manual/commands.html


  \subsection openscad_dif_sm_me Example Markup

  \verbatim
  //
  // This comment will not be passed to Doxygen.
  //

  //! \ingroup the_group_name
  //! @{

  //! Parameterized vehicle design module.
  /***************************************************************//**
   * \param <string> name       Table name.
   * \param <string> translate  String of integers.
   *
   * \details
   *   For a complete list of color names see the World Wide Web
   *   consortium's
   ******************************************************************/
   module example() { }

  /***************************************************************//**
   *
   *      /+   This note will be removed by the filter. +/
   *
   * \page imt Image Table
   *
   * \amu_define  var1  ( table_of_all )
   * \amu_shell   var2  ( "seq -f 'Col (%g)' -s '^' 10" )
   * \amu_define  var3  ( Table of all Generated Images. )
   * \amu_shell   var4  ( "seq -f 'h%g' -s '^' 84" )
   * \amu_combine var5  ( joiner=" " separator="^" tokenizer=" " prefix="a"
   *                      "car truck van"
   *                      "with" "12 17" "wheels" "thats"
   *                      "blue, green," "viewed" "from"
   *                      "right. bottom. diagonal. left. front. back. top." )
   * \amu_make    var6  ( append=test extension=png )
   *
   * \htmlonly
   *   \amu_image_table ( type=html
   *                      id="${var1}" table_caption="${var3}"
   *                      columns="10" column_headings="${var2}"
   *                      cell_captions="${var4}"
   *                      cell_files="${var6}" image_width="92"
   *                      cell_titles="${var5}" )
   * \endhtmlonly
  ******************************************************************/

  //! @}
  \endverbatim


  \subsection openscad_dif_sm_afc_add Adding Filter Commands

  Additional internal commands can be added to the filter by coding the
  function in C++ and incorporating it into the source. External
  functions can also be incorporated using any language that can operate
  on standard input and write to the standard output.

  External functions can be found at:

  \code{.C}
  <install-prefix>/functions/amu_<function>
  \endcode

  When the filter encounters a command of the form
  <tt>amu_<function></tt> that it does not recognize, it checks this
  location and if it finds a match this external command is called to
  handle the command. See examples there as a starting point.


  \section openscad_dif_sm_afc Additional Commands (openscad-dif)

    \subsection dif_afc_amu_combine \\amu_combine
    \copydetails ODIF::ODIF_Scanner::bif_combine()

    \subsection dif_afc_amu_copy \\amu_copy
    \copydetails ODIF::ODIF_Scanner::bif_copy()

    \subsection dif_afc_amu_define \\amu_define
    \copydetails ODIF::ODIF_Scanner::def_init()

    \subsection dif_afc_amu_eval \\amu_eval
    \copydetails ODIF::ODIF_Scanner::bif_eval()

    \subsection dif_afc_amu_file \\amu_file
    \copydetails ODIF::ODIF_Scanner::bif_file()

    \subsection dif_afc_amu_filename \\amu_filename
    \copydetails ODIF::ODIF_Scanner::bif_filename()

    \subsection dif_afc_amu_find \\amu_find
    \copydetails ODIF::ODIF_Scanner::bif_find()

    \subsection dif_afc_amu_foreach \\amu_foreach
    \copydetails ODIF::ODIF_Scanner::bif_foreach()

    \subsection dif_afc_amu_if \\amu_if
    \copydetails ODIF::ODIF_Scanner::if_init()
    \copydetails ODIF::ODIF_Scanner::bif_if_exp_1a()
    \copydetails ODIF::ODIF_Scanner::bif_if_exp_2a()

    \subsection dif_afc_amu_image_table \\amu_image_table
    \copydetails ODIF::ODIF_Scanner::bif_image_table()

    \subsection dif_afc_amu_include \\amu_include
    \copydetails ODIF::ODIF_Scanner::inc_init()

    \subsection dif_afc_amu_make \\amu_make
    \copydetails ODIF::ODIF_Scanner::bif_make()

    \subsection dif_afc_amu_pathid \\amu_pathid
    \copydetails ODIF::ODIF_Scanner::bif_pathid()

    \subsection dif_afc_amu_replace \\amu_replace
    \copydetails ODIF::ODIF_Scanner::bif_replace()

    \subsection dif_afc_amu_scope \\amu_scope
    \copydetails ODIF::ODIF_Scanner::bif_scope()

    \subsection dif_afc_amu_seq \\amu_seq
    \copydetails ODIF::ODIF_Scanner::bif_seq()

    \subsection dif_afc_amu_shell \\amu_shell
    \copydetails ODIF::ODIF_Scanner::bif_shell()

    \subsection dif_afc_amu_source \\amu_source
    \copydetails ODIF::ODIF_Scanner::bif_source()

    \subsection dif_afc_amu_table \\amu_table
    \copydetails ODIF::ODIF_Scanner::bif_table()

    \subsection dif_afc_amu_viewer \\amu_viewer
    \copydetails ODIF::ODIF_Scanner::bif_viewer()

    \subsection dif_afc_amu_word \\amu_word
    \copydetails ODIF::ODIF_Scanner::bif_word()

*******************************************************************************/

//
// eof
//
