/***************************************************************************//**
  \page openscad_dif_ht Command Line Help (openscad-dif)
  \include openscad-dif.help
*******************************************************************************/

/***************************************************************************//**
  \defgroup openscad_dif_src Source Code (openscad-dif)
  \brief
    The Doxygen input filter for \em OpenSCAD scripts.
*******************************************************************************/

/***************************************************************************//**
  \page openscad_dif_doc Program Usage (openscad-dif)
  \tableofcontents


  \section openscad_dif_sm Documenting OpenSCAD scripts

  This filter may be used to preprocess OpenSCAD scripts that have been
  marked up with Doxygen-style documentation. See [Documenting the
  code][docblocks] in the Doxygen manual for information.

  [docblocks]: http://www.doxygen.nl/manual/docblocks.html


  \subsection openscad_dif_sm_cs Comment Sections

  Comment patters are identified according to the rules in the
  following table.

   pattern    | description
  :----------:|:--------------------------------------
   "//"       | ignored comment lines.
   "//"[/!]?  | comment line.
   "/*"[*!]?  | begin a comment block.
   "*"+"/"    | end comment block.
   "/""+"+    | begin a nested comment block.
   "+"+"/"    | end nested comment block.

  As identified in the above table, the filter supports nested
  comments, which are useful for documenting the bahavior of include
  files and macros. A single level of nesting is permitted and must
  exists within a normal comment block. The content of nested comment
  blocks is discarded by the filter. See the flex documentation for
  more information on [patterns].

  [patterns]: https://westes.github.io/flex/manual/Patterns.html


  \subsection openscad_dif_sm_acf AMU Functions

  The filter provides additional Doxygen special commands/functions
  that use the following form:

  \code
  \amu_NAME <variable> ( arguments ) { body }
  \endcode

  Where \em NAME is the function name, \em variable is an optional
  output variable identifier, \em arguments modify the behavior of the
  function, and \em body is a specified text that the function will
  consider. The parts of a function can be split across lines and some
  functions do not require arguments and/or a body.


  \subsubsection openscad_dif_sm_v Variable

  The result of most function will be copied to the output unless an
  optional \em variable identifier follows the function name as shown
  above. When a variable identifier is provided, the function result is
  stored as a global variable in the specified variable identifier and
  is not to copied to output.

  Variables can be referenced in the context of other function \em
  arguments and \em bodies. A variable is referenced using the form:
  <tt>${VAR}</tt>. Variable expansion is recursive and expansion can be
  postponed using escaping as follows: <tt>\\${VAR}</tt>.


  \subsubsection openscad_dif_sm_a Arguments

  The four types of arguments used in functions are summarized in the
  following table:

   type       | example           | description
  :----------:|:-----------------:|:--------------------------------
   positional | value             | local argument
   named      | name=value        | local argument
   flag       | ++flag / \-\-flag | local argument & local variable
   incr/decr  | var++ / var\-\-   | global variable

  The \em positional, \em named, and \em flag types are used for local
  arguments and have \em local scope to the function where they are
  defined. A \em flag also defines a local variable within the scope of
  the function. The \em incr/decr type defines a variable with \em
  global scope across all functions for the current file. A named
  argument takes the form <tt>name=value</tt>, where \em name is a
  variable identifier and \em value is the content to assign. The
  results of a \em flag or \em incr/decr operation can be assigned as a
  named argument. When a value contains one or more spaces it must be
  enclosed by matching single or double quotes to identify it as a
  single value.

  \copydetails ODIF::ODIF_Scanner::fx_incr_arg()


  \subsubsection openscad_dif_sm_b Body

  Some functions, such as \ref dif_afc_amu_if operate on a specific
  body of text. In those cases, the body is contained within a pair of
  braces as shown in the function form above.


  \subsubsection openscad_dif_sm_av Automatic Variables

  The following tables list variables predefined or maintained by the
  filter.

  <b>Input File:</b>

   name               | description
  :-------------------|:----------------------------------
   ABS_FILE_NAME      | absolute input file name
   ABS_PATH_NAME      | absolute input path name
   FILE_NAME          | input file name
   PATH_NAME          | input file path name
   BASE_NAME          | input file base name
   STEM_NAME          | input file stem name
   EXT_NAME           | input file extension name

  <b>Include Files:</b>

   name               | description
  :-------------------|:----------------------------------
   FILE_CURRENT       | current input file name
   FILE_LIST          | list of all included input files

  <b>Function Configuration:</b>

   name               | description
  :-------------------|:----------------------------------
   EFS                | amu_eval feild separator

  <b>Seam Configuration:</b>

   name               | description
  :-------------------|:----------------------------------
   DOXYGEN_OUTPUT     | doxygen output rootpath
   HTML_OUTPUT        | html output path name
   LATEX_OUTPUT       | latex output path name
   DOCBOOK_OUTPUT     | docbook output path name
   RTF_OUTPUT         | rtf output path name
   SCOPE_JOINER       | scope hierarchy joiner
   OUTPUT_PREFIX      | output prefix
   OPENSCAD_PATH      | openscad executable path
   OPENSCAD_EXT       | openscad script extension


  \subsection openscad_dif_sm_adc Doxygen Function Summary

  In addition to the normal Doxygen [special commands], here is a list
  of additional filter-provided command functions that can be used for
  document markup. The documentation for these functions may be found
  in section the \ref openscad_dif_sm_afc "filter commands".

  | internal commands               | description
  |:--------------------------------|:------------------------------------
  | \ref dif_afc_amu_include        | Include a file into input
  | \ref dif_afc_amu_define         | Define text macro
  | \ref dif_afc_amu_if             | Conditional text output
  | \ref dif_afc_amu_foreach        | Enumerated textual substitution
  | \ref dif_afc_amu_eval           | Evaluate arguments
  | \ref dif_afc_amu_shell          | Execute shell command
  | \ref dif_afc_amu_make           | Make script interface
  | \ref dif_afc_amu_openscad       | Run an in-line openscad script
  | \ref dif_afc_amu_scope          | Query scope data
  | \ref dif_afc_amu_source         | Query source filename
  | \ref dif_afc_amu_copy           | Copy references
  | \ref dif_afc_amu_find           | Search for output files
  | \ref dif_afc_amu_pathid         | Generate source path identifier
  | \ref dif_afc_amu_filename       | Operations for filename lists
  | \ref dif_afc_amu_file           | Perform operations on text files
  | \ref dif_afc_amu_combine        | Combine words
  | \ref dif_afc_amu_replace        | Text search and replace operation
  | \ref dif_afc_amu_word           | Count or select words from a list
  | \ref dif_afc_amu_seq            | Generate a sequence of numbers
  | \ref dif_afc_amu_table          | Generate a text table
  | \ref dif_afc_amu_image          | Include an image
  | \ref dif_afc_amu_image_table    | Generate an image table
  | \ref dif_afc_amu_viewer         | Graphics file viewer

  External commands also exists and can be found in the directory:

  \code
  <install-prefix>/functions/
  \endcode

  Here is a list:

  | external commands                 | description
  |:----------------------------------|:--------------------------------
  | \\amu_date                        | current date and/or time
  | \\amu_list                        | format arguments into a list

  [special commands]: http://www.doxygen.nl/manual/commands.html


  \subsection openscad_dif_sm_me Example Markup

  \verbatim
  //
  // This comment will not be passed to Doxygen.
  //

  //! \ingroup the_group_name
  //! @{

  //! Parameterized vehicle design module.
  /***************************************************************//**
   * \param <string> name       Table name.
   * \param <string> translate  String of integers.
   *
   * \details
   *   For a complete list of color names see the World Wide Web
   *   consortium's
   ******************************************************************/
   module example() { }

  /***************************************************************//**
   *
   *      /+   This note will be removed by the filter. +/
   *
   * \page imt Image Table
   *
   * \amu_define  var1  ( table_of_all )
   * \amu_shell   var2  ( "seq -f 'Col (%g)' -s '^' 10" )
   * \amu_define  var3  ( Table of all Generated Images. )
   * \amu_shell   var4  ( "seq -f 'h%g' -s '^' 84" )
   * \amu_combine var5  ( joiner=" " separator="^" tokenizer=" " prefix="a"
   *                      "car truck van"
   *                      "with" "12 17" "wheels" "thats"
   *                      "blue, green," "viewed" "from"
   *                      "right. bottom. diagonal. left. front. back. top." )
   * \amu_make    var6  ( append=test extension=png )
   *
   * \htmlonly
   *   \amu_image_table ( type=html
   *                      id="${var1}" table_caption="${var3}"
   *                      columns="10" column_headings="${var2}"
   *                      cell_captions="${var4}"
   *                      cell_files="${var6}" image_width="92"
   *                      cell_titles="${var5}" )
   * \endhtmlonly
  ******************************************************************/

  //! @}
  \endverbatim


  \subsection openscad_dif_sm_afc_add Adding Filter Commands

  Additional internal commands can be added to the filter by coding the
  function in C++ and incorporating it into the source. External
  functions can also be incorporated using any language that can operate
  on standard input and write to the standard output.

  External functions can be found at:

  \code
  <install-prefix>/functions/amu_NAME
  \endcode

  When the filter encounters a command of the form <tt>amu_NAME</tt>
  that it does not recognize, it checks this location and if it finds a
  match this external command is called to handle the command. See
  examples there as a starting point.


  \section openscad_dif_sm_afc Filter Commands (openscad-dif)

    \subsection dif_afc_amu_combine \\amu_combine
    \copydetails ODIF::ODIF_Scanner::bif_combine()

    \subsection dif_afc_amu_copy \\amu_copy
    \copydetails ODIF::ODIF_Scanner::bif_copy()

    \subsection dif_afc_amu_define \\amu_define
    \copydetails ODIF::ODIF_Scanner::def_init()

    \subsection dif_afc_amu_eval \\amu_eval
    \copydetails ODIF::ODIF_Scanner::bif_eval()

    \subsection dif_afc_amu_file \\amu_file
    \copydetails ODIF::ODIF_Scanner::bif_file()

    \subsection dif_afc_amu_filename \\amu_filename
    \copydetails ODIF::ODIF_Scanner::bif_filename()

    \subsection dif_afc_amu_find \\amu_find
    \copydetails ODIF::ODIF_Scanner::bif_find()

    \subsection dif_afc_amu_foreach \\amu_foreach
    \copydetails ODIF::ODIF_Scanner::bif_foreach()

    \subsection dif_afc_amu_if \\amu_if
    \copydetails ODIF::ODIF_Scanner::if_init()
    \copydetails ODIF::ODIF_Scanner::bif_if_exp_1a()
    \copydetails ODIF::ODIF_Scanner::bif_if_exp_2a()

    \subsection dif_afc_amu_image \\amu_image
    \copydetails ODIF::ODIF_Scanner::bif_image()

    \subsection dif_afc_amu_image_table \\amu_image_table
    \copydetails ODIF::ODIF_Scanner::bif_image_table()

    \subsection dif_afc_amu_include \\amu_include
    \copydetails ODIF::ODIF_Scanner::inc_init()

    \subsection dif_afc_amu_make \\amu_make
    \copydetails ODIF::ODIF_Scanner::bif_make()

    \subsection dif_afc_amu_openscad \\amu_openscad
    \copydetails ODIF::ODIF_Scanner::bif_openscad()

    \subsection dif_afc_amu_pathid \\amu_pathid
    \copydetails ODIF::ODIF_Scanner::bif_pathid()

    \subsection dif_afc_amu_replace \\amu_replace
    \copydetails ODIF::ODIF_Scanner::bif_replace()

    \subsection dif_afc_amu_scope \\amu_scope
    \copydetails ODIF::ODIF_Scanner::bif_scope()

    \subsection dif_afc_amu_seq \\amu_seq
    \copydetails ODIF::ODIF_Scanner::bif_seq()

    \subsection dif_afc_amu_shell \\amu_shell
    \copydetails ODIF::ODIF_Scanner::bif_shell()

    \subsection dif_afc_amu_source \\amu_source
    \copydetails ODIF::ODIF_Scanner::bif_source()

    \subsection dif_afc_amu_table \\amu_table
    \copydetails ODIF::ODIF_Scanner::bif_table()

    \subsection dif_afc_amu_viewer \\amu_viewer
    \copydetails ODIF::ODIF_Scanner::bif_viewer()

    \subsection dif_afc_amu_word \\amu_word
    \copydetails ODIF::ODIF_Scanner::bif_word()

*******************************************************************************/

//
// eof
//
