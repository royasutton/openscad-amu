//
// (doxygen) file header.
//

/***************************************************************************//**
  \file   library.scad
  \author Designers' Name
  \date   2016-2017

  \copyright
    Copyright notice.

  \brief
    Short library description.

  \details
    Long library description.

    \amu_make  stl_files ( append=scope1 extension=stl )
    \amu_shell stl_words ( "echo ${stl_files} | sed 's/ /^/g'" )

    Here is a list of STL files that have been generated by the build script
    embedded in \em scope1: \amu_list ( ${stl_files} )

    Here are the same list items in a table:
    \amu_table
      (
        columns=2
        cell_captions="A^B^C^D"
        cell_texts="${stl_words}"
        cell_urls="${stl_files}"
      )

    \amu_make png_files ( append=scope2 extension=png )
    \amu_word  file_cnt ( words="${png_files}" ++count )
    \amu_seq     labels ( prefix="(" suffix=")" last=${file_cnt} ++number )

    \htmlonly
      \amu_image_table
        (
          type=html columns=6 image_width="160"
          table_caption="Library Model Examples"
          cell_files="${png_files}"
          cell_captions="${labels}"
        )
    \endhtmlonly

    \amu_make eps_files ( append=scope2 extension=png2eps )
    \latexonly
      \amu_image_table
        (
          type=latex columns=6 image_width="1.00in"
          table_caption="Library Model Examples"
          cell_files="${eps_files}"
          cell_captions="${labels}"
        )
    \endlatexonly

*******************************************************************************/


//
// (openscad) functions and modules.
//

//! library module one short description.
/***************************************************************************//**
  \param p1   <string>  parameter one.
  \param p2   <integer> parameter two.

  \details
    library module one long description.

  \todo complete library.
  \private
*******************************************************************************/
module lm1( p1="X", p2=10 ) {
  linear_extrude(height=p2*10)
  text(text=p1, size=p2*50);
}


//
// (openscad) globals.
//

/*
  This is a library. Avoid or minimize the use of globals.
  Use functions and parameters to facilitate reuse.
*/


//----------------------------------------------------------------------------//
// openscad-amu auxiliary design flow scripts
//----------------------------------------------------------------------------//

/*
BEGIN_SCOPE scope1;
  BEGIN_OPENSCAD;
    use <library.scad>;

    aux_script_str="A";
    aux_script_int=10;

    lm1(p1=aux_script_str, p2=aux_script_int);
  END_OPENSCAD;

  BEGIN_MFSCRIPT;
    defines name "str" define "aux_script_str" strings "A B C D";
    defines name "int" define "aux_script_int" integers "2";

    variables
      set_makefile "${__MAKE_FILE__}"  add_depend "${__MAKE_FILE__}"
      set_source "${__SCOPE_FILE__}"   set_prefix "${__PREFIX__}"

      set_ext "stl"
      clear_convert
      set_opts "--render"
      set_opts_combine "str int";

    script
      begin_makefile_new
        include_copy "${__AMU_INCLUDE_PATH__}/parallel_jobs.mk"
        summary  tables  targets  menu
      end_makefile;
  END_MFSCRIPT;
END_SCOPE;

BEGIN_SCOPE scope2;
  BEGIN_OPENSCAD;
    use <library.scad>;

    aux_script_str="A";
    aux_script_int=10;

    lm1(p1=aux_script_str, p2=aux_script_int);
  END_OPENSCAD;

  BEGIN_MFSCRIPT;
    defines name "str" define "aux_script_str" strings "A B C D";
    defines name "int" define "aux_script_int" integers "2";
    views   name "views" distance "100" views "top bottom diag";
    images  name "sizes" aspect "4:3" wsizes "320";

    variables
      set_makefile "${__MAKE_FILE__}"  add_depend "${__MAKE_FILE__}"
      set_source "${__SCOPE_FILE__}"   set_prefix "${__PREFIX__}"

      set_ext "png"
      set_convert_exts "eps"  set_convert_opts "-verbose"
      set_opts "--preview --projection=o --viewall --autocenter"
      set_opts_combine "str int views sizes";

    script
      begin_makefile_new
        include_copy "${__AMU_INCLUDE_PATH__}/parallel_jobs.mk"
        summary  tables  targets  menu
      end_makefile;
  END_MFSCRIPT;
END_SCOPE;
*/

//----------------------------------------------------------------------------//
// end of file
//----------------------------------------------------------------------------//
