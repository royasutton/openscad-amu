#!/usr/bin/make -f
################################################################################
#
#  Copyright (C) 2016 Roy Allen Sutton
#
#  This file is part of OpenSCAD AutoMake Utilities ([openscad-amu]
#  (https://github.com/royasutton/openscad-amu)).
#
#  openscad-amu is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  openscad-amu is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  [GNU General Public License] (https://www.gnu.org/licenses/gpl.html)
#  for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with openscad-amu.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

################################################################################
# Functions
################################################################################

#------------------------------------------------------------------------------#
# Output Formatting
#------------------------------------------------------------------------------#

# horizontal_bar (arg1,arg2)
# arg1: A character to repeat for the horizontal bar.
# arg2: The number of times to repeat the character [default: $(terminal_columns)].
# returns nothing.
define horizontal_bar
  $(amu_pm_d2)
  $(info $(subst $(space),$(empty), \
  $(foreach x,$(shell $(seq) $(or $2,$(terminal_columns))),$(or $1,#))))
endef

# heading1 (arg1,arg2,arg3)
# arg1: The text for the level-1 heading.
# arg2: A character for the horizontal bar [default: #].
# arg3: A character to prefix each text line [default: #].
# returns nothing.
define heading1
  $(amu_pm_d3)
  $(call horizontal_bar,$2)
  $(call horizontal_bar,$2)
  $(info $(or $3,#)$(or $3,#))
  $(info $(or $3,#)$(or $3,#)$1)
  $(info $(or $3,#)$(or $3,#))
  $(call horizontal_bar,$2)
  $(call horizontal_bar,$2)
endef

# heading2 (arg1,arg2,arg3)
# arg1: The text for the level-2 heading.
# arg2: A character for the horizontal bar [default: #].
# arg3: A character to prefix each text line [default: #].
# returns nothing.
define heading2
  $(amu_pm_d3)
  $(call horizontal_bar,$2)
  $(info $(or $3,#)$1)
  $(call horizontal_bar,$2)
endef

# target_heading (arg1,arg2)
# arg1: The text for the heading [default: target name].
# arg2: Heading level number [1 or 2; default 1].
# returns nothing (outputs iff target_headings == $(true)).
define target_heading
  $(amu_pm_d2)
  $(if $(call bool_decode,$(target_headings)),
    $(if $(call strings_equal,$(or $(strip $2),1),1),$(call heading1, $(or $1,$@)))
    $(if $(call strings_equal,$(strip $2),2),$(call heading2, $(or $1,$@)))
  )
endef

# target_begin (arg1)
# arg1: Heading level number [1 or 2; default 1].
# returns nothing.
target_begin = $(amu_pm_d1)$(call target_heading,(begin) $@,$(or $1,1))

# target_end (arg1)
# arg1: Heading level number [1 or 2; default 1].
# returns nothing.
target_end = $(amu_pm_d1)$(call target_heading,(end) $@,$(or $1,2))

#------------------------------------------------------------------------------#
# Variable Output
#------------------------------------------------------------------------------#

# enumerate_variable (arg1,arg2,arg3)
# arg1: A variable that will have its members enumerated.
# arg2: An encoded boolean; display value of each enumerated member?
# arg3: An encoded boolean; sort the enumerated member list?
# returns nothing.
define enumerate_variable
  $(amu_pm_d3)
  $(call heading2, [ $(strip $1) ($(words $($(strip $1)))) ] *,=,*)
  $(foreach v, \
    $(if $(call bool_decode,$3),$(sort $($(strip $1))),$($(strip $1))), \
    $(info $(space3) $(if $(call bool_decode,$2),$v='$($v)',$v)) \
  )
endef

# list_variables (arg1,arg2,arg3)
# arg1: A Variable list.
# arg2: An encoded boolean; decode values as booleans?
# arg3: Optional list heading.
# returns nothing.
define list_variables
  $(amu_pm_d3)
  $(if $3,$(call heading2, [$3 ($(words $1)) ] *,=,*))
  $(if $(call bool_decode,$2), \
    $(foreach v,$1,$(info $(space3) $v=$(call bool_string,$($v)))), \
    $(foreach v,$1,$(info $(space3) $v='$($v)')) \
  )
endef

#------------------------------------------------------------------------------#
# String
#------------------------------------------------------------------------------#

# strings_equal (arg1,arg2)
# arg1: String1 for comparison.
# arg2: String2 for comparison.
# returns encoded boolean $(true) if string1 and string2 are identical.
strings_equal = $(amu_pm_d2)$(if $(subst x$1,$(empty),x$2)$(subst x$2,$(empty),x$1),$(false),$(true))

# sstrings_equal (arg1,arg2)
# arg1: String1 for comparison.
# arg2: String2 for comparison.
# returns encoded boolean $(true) if striped string1 and striped string2 are identical.
sstrings_equal = $(amu_pm_d2)$(call strings_equal,$(strip $1),$(strip $2))

# strings_not_equal (arg1,arg2)
# arg1: String1 for comparison.
# arg2: String2 for comparison.
# returns encoded boolean $(false) if string1 and string2 are identical.
strings_not_equal = $(amu_pm_d2)$(if $(subst x$1,$(empty),x$2)$(subst x$2,$(empty),x$1),$(true),$(false))

# sstrings_not_equal (arg1,arg2)
# arg1: String1 for comparison.
# arg2: String2 for comparison.
# returns encoded boolean $(false) if striped string1 and striped string2 are identical.
sstrings_not_equal = $(amu_pm_d2)$(call strings_not_equal,$(strip $1),$(strip $2))

#------------------------------------------------------------------------------#
# Boolean
#------------------------------------------------------------------------------#

# bool_encode (arg1)
# arg1: A string.
# returns $(true) if the string is not empty and $(false) otherwise.
bool_encode = $(amu_pm_d1)$(if $1,$(true),$(false))

# bool_decode (arg1)
# arg1: An encoded boolean value [$(true)/$(false)].
# returns $(true) if the boolean equals $(true) and $(empty) otherwise.
bool_decode = $(amu_pm_d1)$(if $(call strings_equal,$(strip $1),$(true)),$(true),$(empty))

# bool_string (arg1)
# arg1: An encoded boolean [$(true)/$(false)].
# returns the string representation of the encoded boolean value.
bool_string = $(amu_pm_d1)$(if $(call bool_decode,$1),$$(true),$$(false))

# not (arg1)
# arg1: An encoded boolean value [$(true)/$(false)].
# returns the inverse of the encoded boolean value.
not = $(amu_pm_d1)$(if $(call bool_decode,$1),$(false),$(true))

#------------------------------------------------------------------------------#
# Path manipulation
#------------------------------------------------------------------------------#

# path_no_ldls (arg1)
# arg1: A file path.
# returns the file path without leading directory separator.
path_no_ldls = $(amu_pm_d1)$(strip \
  $(if $(call strings_equal,$1,$(patsubst $(dir_level_sep)%,%,$1)), \
    $1, \
    $(call path_no_ldls,$(patsubst $(dir_level_sep)%,%,$1)) \
  ))

# path_add_ldls (arg1)
# arg1: A file path.
# returns the file path with a single leading directory separator.
path_add_ldls = $(amu_pm_d1)$(dir_level_sep)$(call path_no_ldls,$1)

# path_no_tdls (arg1)
# arg1: A file path.
# returns the file path without trailing directory separator.
path_no_tdls = $(amu_pm_d1)$(strip \
  $(if $(call strings_equal,$1,$(patsubst %$(dir_level_sep),%,$1)), \
    $1, \
    $(call path_no_tdls,$(patsubst %$(dir_level_sep),%,$1)) \
  ))

# path_add_tdls (arg1)
# arg1: A file path.
# returns the file path with a single trailing directory separator.
path_add_tdls = $(amu_pm_d1)$(call path_no_tdls,$1)$(dir_level_sep)

# path_parent (arg1)
# arg1: A file path.
# returns the file path parent directory.
path_parent = $(amu_pm_d1)$(strip \
  $(patsubst \
    %$(dir_level_sep)$(lastword $(subst $(dir_level_sep), \
    $(space), \
    $1)),%,$(call path_no_tdls,$1)) \
  )

# paths_common_ancestor (arg1,arg2)
# arg1: An absolute path1.
# arg2: An absolute path2.
# returns the first ancestor path common to path1 and path2.
paths_common_ancestor = $(amu_pm_d2)$(call __paths_common_ancestor,$1,$2,$1)

# __paths_common_ancestor (arg1,arg2,arg3)
# arg1: An absolute path1.
# arg2: An absolute path2.
# arg3: A path prefix.
# returns returns path prefix if path1 and path2 both begin with the prefix,
# otherwise recursively check the parent path of the path prefix.
__paths_common_ancestor = $(amu_pm_d3)$(strip \
  $(if $(or $(patsubst $3/%,,$1),$(patsubst $3/%,,$2)), \
    $(call __paths_common_ancestor,$1,$2,$(call path_parent,$3)), \
    $3 \
  ))

# relative_path (arg1,arg2)
# arg1: An absolute path to make relative.
# arg2: An absolute reference path.
# returns the path relative to reference path.
relative_path = $(amu_pm_d2)$(subst $(space),$(empty), \
  $(call __relative_path,$(call path_add_ldls,$1),$(call path_add_ldls,$2)))

# __relative_path (arg1,arg2)
# arg1: A path to make relative.
# arg2: A reference path.
# returns the path relative to reference path.
__relative_path = $(amu_pm_d2) \
  $(patsubst \
    %, \
    ..$(dir_level_sep), \
    $(subst \
      $(dir_level_sep), \
      $(space), \
      $(patsubst \
        $(call paths_common_ancestor,$1,$2)$(dir_level_sep)%, \
        %, \
        $2 \
      ) \
    ) \
  ) \
  $(patsubst \
    $(call paths_common_ancestor,$1,$2)$(dir_level_sep)%, \
    %, \
    $1 \
  )

#------------------------------------------------------------------------------#
# Text file variable I/O
#------------------------------------------------------------------------------#

# format_key_value (arg1,arg2)
# arg1: Keyword.
# arg2: Value.
# returns formated keyword-value assignment.
format_key_value = $(amu_pm_d2)$1 = $2

# format_kv_variable (arg1)
# arg1: Variable.
# returns formated keyword-value assignment for a variable and its value.
format_kv_variable = $(amu_pm_d1)$(call format_key_value,$1,$($1))

# write_key_value (arg1,arg2,arg3)
# arg1: File.
# arg2: Keyword.
# arg3: Value.
# returns nothing.
write_key_value = $(amu_pm_d3)$(file >> $1,$(call format_key_value,$2,$3))

# read_key_value (arg1,arg2)
# arg1: File.
# arg2: Keyword.
# returns the value of the last keyword found in the file and returns the
# empty string when the keyword is not found (skips over empty lines and
# lines that begin with the hash/comment character).
read_key_value = $(amu_pm_d2)$(shell \
  $(sed) -e '/^[[:space:]]*$(dollar)/d' \
         -e '/^[[:space:]]*$(hash)/d' $1 \
         -e 's/^[[:space:]\t]*//' | \
  $(grep) $2 | \
  $(tail) -1 | \
  $(sed) 's/$(call format_key_value,$2,$(empty))//')

#------------------------------------------------------------------------------#
# Other
#------------------------------------------------------------------------------#

# unique (arg1)
# arg1: A list of space separated terms.
# returns the list without repeat members.
unique = $(amu_pm_d1)$(strip \
  $(if $1,$(firstword $1) $(call unique,$(filter-out $(firstword $1),$1))) \
  )

# join_with (arg1,arg2,arg3)
# arg1: A string that joins each member together.
# arg2: A list of space separated members to join.
# arg3: An encoded boolean; make resulting list members unique?
# returns a string of joined terms connected together by the joiner string.
join_with = $(amu_pm_d3)$(strip \
  $(if $(call bool_decode,$3), \
    $(subst $(space),$1,$(call unique,$(subst $1,$(space),$(strip $2)))), \
    $(subst $(space),$1,$(strip $2)) \
  ))

# first_of (arg1)
# arg1: List of shell commands for which to search using which.
# returns the first command found in the search path or $(empty) if none are found.
first_of = $(amu_pm_d1)$(strip \
    $(or $(realpath $(firstword $(shell which 2> /dev/null $1))),$(empty)) \
  )

# variable_list_check (arg1,arg2,arg3,arg4)
# arg1: A list of variables to check.
# arg2: A check verb (ie: found, configured, etc).
# arg3: An encoded boolean; use debug or verbose messages?
# arg4: An encoded boolean; empty variables are errors or warnings?
# returns nothing.
define variable_list_check
  $(amu_pm_d4) \
  $(foreach x,$(sort $1), \
    $(if $($x), \
      $(if $(call bool_decode,$3), \
        $(call amu_pm_m,$2 $x=$($x)),$(call amu_pm_dm,$2 $x=$($x))), \
      $(if $(call bool_decode,$4), \
        $(warning WARNING: [$x] not $2),$(error [$x] not $2)) \
    ) \
  )
endef

# execute_command (arg1,arg2,arg3)
# arg1: Command string.
# arg2: An encoded boolean; compound command?
# arg3: An encoded boolean; $(true) to join with "||" and $(false) for "&&"
# returns command string.
execute_command = $(amu_pm_d3) \
  $(if $(call bool_decode,$2),$(if $(call bool_decode,$3),$1 ||,$1 &&),$1$(newline))

################################################################################
# eof
################################################################################
