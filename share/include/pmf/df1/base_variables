#!/usr/bin/make -f
################################################################################
#
#  Copyright (C) 2016-2017 Roy Allen Sutton
#
#  This file is part of OpenSCAD AutoMake Utilities ([openscad-amu]
#  (https://royasutton.github.io/openscad-amu)).
#
#  openscad-amu is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  openscad-amu is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  [GNU General Public License] (https://www.gnu.org/licenses/gpl.html)
#  for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with openscad-amu.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

################################################################################
# Variables
################################################################################

# parallel Execution
ifeq ($(parallel_jobs),$(true))
  MAKEFLAGS += --jobs=$(cpu_cnt)
endif

# remove any file extension from design and library
design  := $(basename $(design))
library := $(basename $(library))

# remove spaces from project name and version
project_name    := $(subst $(space),$(empty),$(project_name))
project_version := $(subst $(space),$(empty),$(project_version))

# input source files
ifdef design
  ifdef design_prefix
    design_files += $(addprefix $(design_prefix),$(addsuffix $(scad_ext),$(design)))
  else
    design_files += $(addsuffix $(scad_ext),$(design))
  endif
  src_files += $(design_files)
endif

ifdef library
  ifdef library_prefix
    library_files += $(addprefix $(library_prefix),$(addsuffix $(scad_ext),$(library)))
  else
    library_files += $(addsuffix $(scad_ext),$(library))
  endif
  src_files += $(library_files)
endif

# output directory
ifndef output_path
  output_path := \
    $(call join_with,$(if $(output_path_use_dir_sep),$(dir_level_sep),$(output_path_term_joiner)), \
      $(strip $(foreach x,$(output_path_spec), \
        $(if $(call bool_decode,$(output_path_add_$x)),$($x)))))$(dir_level_sep)
else
  $(call amu_pm_m,using pre-defined value for $$(output_path))
endif

# backup basename
ifndef backup_basename
  backup_basename := \
    $(call join_with,$(empty),$(backup_root)$(dir_level_sep) \
    $(call join_with,$(if $(backup_file_use_dir_sep),$(dir_level_sep),$(backup_file_term_joiner)), \
      $(strip $(foreach x,$(backup_file_spec), \
        $(if $(call bool_decode,$(backup_file_add_$x)),$($x))))))
else
  $(call amu_pm_m,using pre-defined value for $$(backup_basename))
endif

# release directory
ifndef release_path
  release_path := \
    $(call join_with,$(empty),$(release_root)$(dir_level_sep) \
    $(call join_with,$(if $(release_path_use_dir_sep),$(dir_level_sep),$(release_path_term_joiner)), \
      $(strip $(foreach x,$(release_path_spec), \
        $(if $(call bool_decode,$(release_path_add_$x)),$($x))))))$(dir_level_sep)
else
  $(call amu_pm_m,using pre-defined value for $$(release_path))
endif

# release archive basename
ifndef release_archive_basename
  release_archive_basename := \
    $(call join_with,$(empty),$(release_path) \
    $(call join_with,$(if $(release_archive_file_use_dir_sep),$(dir_level_sep),$(release_archive_file_term_joiner)), \
      $(strip $(foreach x,$(release_archive_file_spec), \
        $(if $(call bool_decode,$(release_archive_file_add_$x)),$($x))))))
else
  $(call amu_pm_m,using pre-defined value for $$(release_archive_basename))
endif

# library install sub-directory
ifndef library_install_subdir
  library_install_subdir := $(project_name)-$(project_version)$(dir_level_sep)
else
  $(call amu_pm_m,using pre-defined value for $$(library_install_subdir))
endif

# backup files
backup_files := $(src_files) $(word 1,$(MAKEFILE_LIST)) $(project_files_add) $(backup_files_add)

# release stamps
release_manifest := $(addprefix $(release_path),manifest$(stamp_ext))
release_stamp := $(addsuffix $(stamp_ext),$(call path_no_tdls,$(release_path)))

# release files (use recursive assignment)
release_files = $(release_files_add)

ifeq ($(release_project),$(true))
  release_files += $(word 1,$(MAKEFILE_LIST)) $(project_files_add)
endif

ifeq ($(release_design),$(true))
  release_files += $(design_files)
endif

ifeq ($(release_library),$(true))
  release_files += $(library_files)
endif

# release archive files (use recursive assignment)
release_archive_files = $(release_archive_files_add)

ifeq ($(release_archive_project),$(true))
  release_archive_files += $(word 1,$(MAKEFILE_LIST)) $(project_files_add)
endif

ifeq ($(release_archive_design),$(true))
  release_archive_files += $(design_files)
endif

ifeq ($(release_archive_library),$(true))
  release_archive_files += $(library_files)
endif

#------------------------------------------------------------------------------#
# Configuration Variable List
#------------------------------------------------------------------------------#

project_config_variables := \
  project_name \
  project_version \
  project_brief \
 \
  design_prefix \
  design \
  \
  library_prefix \
  library \
  \
  scad_ext  \
  mfs_ext \
  mf_ext \
  stamp_ext \
  \
  project_files_add \
  \
  output_root \
  \
  backup_root \
  backup_files_add \
  backup_exts \
  \
  release_root \
  release_files_add \
  release_archive_files_add \
  release_archive_exts

project_config_derived := \
  output_path \
  backup_basename \
  release_path \
  release_archive_basename \
  library_install_subdir

#------------------------------------------------------------------------------#
# Version Checks
#------------------------------------------------------------------------------#
#ifeq ($(version_checks),$(true))

#endif

#------------------------------------------------------------------------------#
# Help Text
#------------------------------------------------------------------------------#

define help_text_base
 all, clean, install, uninstall, info:
     do above named for all components.

 clean-base:
     clean base files.

 install-library:
     install library files.

 uninstall-library:
     remove installed library files.

 info-makefile:
     makefile information.

 info-system:
     system information.

 info-project:
     project information.

 backup:
     create backup of source files.

 release:
     create a project release.

 echo-x, print-x, list-x, listv-x, slist-x, slistv-x, info-x:
     show information for the variable named x.

 help:
     display this help text.
endef

################################################################################
# eof
################################################################################
