#/##############################################################################
  \mainpage Makefile Script Library

  \anchor library

  \dot "Compile-Scripting and Documentation-Generatation for OpenSCAD Designs."
    digraph example {
      node [shape=Mrecord, fontname=Helvetica, fontsize=10];
      a [label="openscad-amu" URL="../../../../../doxygen/html/index.html"];
      b [label="C++ Programs" URL="../../../../../src/doxygen/html/index.html"];
      c [label="Makefile Script Library" URL="index.html" style="filled"];
      d [label="Support Scripts" URL="../../../../scripts/doxygen/html/index.html"];
      a->b; a->c; a->d;
    }
   \enddot

  \section library_members Members

    - \ref library_core "Core members"
    - \ref library_support "Support members"

  \section library_files Files

    - amu_mfs_init.bash
    - print.bash
    - print_textbox.bash
    - exception.bash
    - table.bash
    - openscad_opts.bash
    - utility.bash
    - make_makefile.bash

    To use the library functions, a script must first set the environment
    variable \c ${\__LIB_PATH\__}. Optionally, \c ${\__VERBOSE\__} can be
    set to \c true to enable verbose output within the library functions.
    Next, source the \c amu_mfs_init.bash file to initialize the library.
    See the \ref hello_world example below for an example.

  \section hello_world Hello World

    \includelineno hello_world.bash

    This script will create a makefile with four targets. Line 17
    through 21 create two set tables, named \c view and \c size, that
    contain command line option strings. Each entry has a table name, a
    key name, and a key value string . Line 17 specified the basic
    parameters of the makefile to be generated, including the two table
    names that were created with the command line options. Line 31
    begins the creation of the makefile.

    When this script is run, it will generate a makefile named \c
    hello_world.makefile with four targets. Each target will invoke
    OpenSCAD once for the four resulting combinations of the two
    entries in the options table. The commons OpenSCAD options set by
    \c set_opts on line 28 will be used during the invocation all of
    the generated targets.

    Here is the resulting generated
    \link hello_world.makefile makefile.\endlink

  \example hello_world.bash
    A simple hello world makefile script example.

  \example hello_world.makefile
    Resulting makefile generated by hello_world.bash.
###############################################################################/


#/##############################################################################
  \defgroup library_arguments Argument naming convention

    The library is written using the Bourne Again SHell (bash)
    scripting language. Bash variables are untyped and are all basically
    character strings. Their use depends on the context. Bash function
    parameters are passed as positional character strings with no type
    checking. To use named function parameters, parameter parsing code
    is required. This library makes use of both positional and named
    parameters.

    To help document the use of these functions, the following
    conventions are made:

    - Required vs. optional,
    - Matching method,
    - Type or use,
    - Limits, and
    - Dimension.

    \b Required:
    Some parameters are required and some are optional. When a parameters
    is required, its type description begins with the word \c required.
    When a parameter is optional, there is no need to label it such
    unless this is desired just for clarification.

    \b Method:
    Two matching methods are used. Positional and named. Positional
    arguments will have the description \c arg1, \c arg2, ..., \argn.
    The description \c argv is used to identify the entire list of arguments.
    When arguments are named, the description \c name is used. The parameter
    name keyword will be identified by the final name after the type
    description.

    \b Type:
    Although all type are essentially character strings, this is used to
    give a better idea of how the parameter is used. Typical values are:
    \c character, \c string, \c integer, \c file, \c path, \c function.

    \b Limits:
    This give guidance on what are acceptable values for the parameter.
    It it often used to indicate that a preset value is expected. It may
    also used to set the value ranges on integers, such as 1-10.

    \b Dimension:
    Parameter values may be either a single words or a list of words.
    To assign a list of words to a parameter value, the list must be
    enclosed in single or double quotation marks.
###############################################################################/


#/##############################################################################
  \defgroup library_core Makefile script library core

  \copydoc library_arguments

  \warning  As in all bash scripts, long lines may be broken up into several
            smaller lines and continued using the '\\' character at the end
            of each preceding line. When writing scripts directly this must
            be done explicitly. When writing embedded scripts that will be
            extracted using \ref openscad_seam, long lines are explicitly
            terminated using the ';' character. Therefore this is no need
            to use the continuation character. Long lines will be joined
            together and written to a single line when the line termination
            character is encountered.

    Here is an example stand along script:

    \include log_segregate.bash

    Here is an example of an embedded script:

    \dontinclude vehicle.scad
    \skipline Begin_Scope document
    \until End_Scope

  \note All script function names are case sensitive. The function argument
        keywords are case insensitive.
###############################################################################/


#/##############################################################################
  \defgroup library_support Makefile script library support

  \copydoc library_arguments
###############################################################################/


#
# eof
#
